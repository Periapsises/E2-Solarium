@name Solarium V-X

@persist Names:table Bodies:table

@persist IsClient
@persist PrintArray:array IsPrinting:number
@persist Time Y M D UT YSpeed MSpeed DSpeed UTSpeed

# Beginning of if(first())
if(first() | duped()){
    
    IsClient = 0
    
    function void printClient(String:string){
        printColor(vec(100,150,255),"[Solarium] ",vec(150),"- ",vec(255),String)
    }
    function void printServer(String:string){
        concmd("say [Solarium] - " + String)
    }
    function void printText(String:string){
        if(IsClient){printClient(String)
        }else{printServer(String)}
    }
    function void printArray(Array:array,Override:number){
        if(IsClient | Override){
            for(I = 1, Array:count(), 1){
                printClient(Array[I,string])
            }
        }else{
            PrintArray = PrintArray:add(Array)
            if(!IsPrinting){
                IsPrinting = 1
                timer("nextString",100)
            }
        }
    }
    
    # Convert values between Kilometers and Astronomical Units 
    function number km2au(KM){
        return (KM / 149598073)
    }
    function number au2km(AU){
        return (AU * 149598073)
    }
    
    # Planet Hologram creation
    function void planetHolo(ID){
        holoCreate(ID,entity():pos(),vec(0.025),ang(),vec(255),"models/sprops/geometry/sphere_144.mdl")
        holoParent(ID,entity())
    }
    
    # Setup for orbital elements
    function void setOE(Name:string,ID,Type:string,Size,Color:vector,N,I,W,A,E,M,N1,I1,W1,A1,E1,M1){
        # N long of asc node I inclin W arg of peri A semi m axis E ecc M mean anomaly
        Bodies[Name,table] = table()
        Bodies[Name,table]["ID",number] = ID
        Bodies[Name,table]["type",string] = Type
        Bodies[Name,table]["size",number] = Size
        Bodies[Name,table]["color",vector] = Color
        Bodies[Name,table]["N",number] = N
        Bodies[Name,table]["i",number] = I
        Bodies[Name,table]["w",number] = W
        Bodies[Name,table]["a",number] = A
        Bodies[Name,table]["e",number] = E
        Bodies[Name,table]["M",number] = M
        Bodies[Name,table]["NDelta",number] = N1
        Bodies[Name,table]["iDelta",number] = I1
        Bodies[Name,table]["wDelta",number] = W1
        Bodies[Name,table]["aDelta",number] = A1
        Bodies[Name,table]["eDelta",number] = E1
        Bodies[Name,table]["MDelta",number] = M1
    }
    
    # Time Calculation
    function void timeClk(){
        Time = (367 * Y - 7 * (Y + (M + 9) / 12) / 4 + 275 * M / 9 + D - 730530)
        Time = Time + (UT / 24.00)
    }
    
    # Position Calculation Function
    function vector getPos(Name:string){
        local EN = Bodies[Name,table]["N",number] + (Bodies[Name,table]["NDelta",number] * Time)
        local Ei = Bodies[Name,table]["i",number] + (Bodies[Name,table]["iDelta",number] * Time)
        local Ew = Bodies[Name,table]["w",number] + (Bodies[Name,table]["wDelta",number] * Time)
        local Ea = Bodies[Name,table]["a",number] + (Bodies[Name,table]["aDelta",number] * Time)
        local Ee = Bodies[Name,table]["e",number] + (Bodies[Name,table]["eDelta",number] * Time)
        local EM = Bodies[Name,table]["M",number] + (Bodies[Name,table]["MDelta",number] * Time)
        local Ew1 = EN + Ew
        local EL = EM + Ew1
        local Eq = Ea * (1 - Ee)
        local EQ = Ea * (1 + Ee)
        local EP = Ea ^ 1.5
        local EE = EM + Ee * (180 / pi()) * sin(EM) * (1.0 + Ee * cos(EM))
        local I0 = EE
        local I1 = I0 - (I0 - Ee * (180 / pi()) * sin(I0) - EM) / (1 - Ee * cos(Ee))
        local I2 = I1 - (I1 - Ee * (180 / pi()) * sin(I1) - EM) / (1 - Ee * cos(Ee))
        local I3 = I2 - (I2 - Ee * (180 / pi()) * sin(I2) - EM) / (1 - Ee * cos(Ee))
        local I4 = I3 - (I3 - Ee * (180 / pi()) * sin(I3) - EM) / (1 - Ee * cos(Ee))
        local I5 = I4 - (I4 - Ee * (180 / pi()) * sin(I4) - EM) / (1 - Ee * cos(Ee))
        EE = I5 - (I5 - Ee * (180 / pi()) * sin(I5) - EM) / (1 - Ee * cos(Ee))
        local Xv = Ea * (cos(EE) - Ee)
        local Yv = Ea * (sqrt(1.0 - Ee*Ee) * sin(EE))
        local Ev = atan(Yv,Xv)
        local Er = sqrt(Xv * Xv + Yv * Yv)
        local Exe = Er * (cos(EN) * cos(Ev + Ew) - sin(EN) * sin(Ev + Ew) * cos(Ei))
        local Eye = Er * (sin(EN) * cos(Ev + Ew) + cos(EN) * sin(Ev + Ew) * cos(Ei))
        local Eze = Er * (sin(Ev + Ew) * sin(Ei))
        return vec(Exe,Eye,Eze)
    }
    
    # Names Initialisation
    Names[0,string] = "Sun"
    Names[1,string] = "Mercury"
    Names[2,string] = "Venus"
    Names[3,string] = "Earth",Names[4,string] = "Moon"
    Names[5,string] = "Mars",Names[6,string] = "Phobos",Names[7,string] = "Deimos"
    Names[8,string] = "Ceres"
    
    # Orbital Elements Initialisation
    # N long of asc node I inclin W arg of peri A semi m axis E ecc M mean anomaly
    setOE("sun"    ,0,"sun"   ,695508,vec(255,175,25) ,0,0,0,0,0,0,0,0,0,0,0,0)
    setOE("mercury",1,"planet",2440  ,vec(112,101,56) ,48.3313,7.0047,29.1241,0.387098,0.205635,168.6562,3.24587e-5,5.00e-8,1.01444e-5,0,5.59e-10,4.0923344368)
    setOE("venus"  ,2,"planet",6052  ,vec(193,143,23) ,76.6799,3.3946,54.8910,0.72333,0.006773,48.0052,2.46590e-5,2.75e-8,1.38374e-5,0,-1.302e-9,1.6021302244)
    setOE("earth"  ,3,"planet",6371  ,vec(125,175,255),0,0,282.9404,1.00,0.016709,356.0470,0,0,4.70935e-5,0,-1.151e-9,0.9856002585)
    setOE("moon"   ,4,"moon"  ,1737  ,vec(225)        ,125.1228,5.1454,318.0634,0.00257188153,0.054900,115.3654,-0.0529538083,0,0.1643573223,0,0,13.0649929509)
    setOE("mars"   ,5,"planet",3390  ,vec(193,68,14)  ,49.5574,1.8497,286.5016,1.523688,0.093405,18.6021,2.11081e-5,-1.78e-8,2.92961e-5,0,2.516e-9,0.5240207766)
    setOE("phobos" ,6,"moon"   ,0    ,vec(0)          ,0,0,0,0,0,0,0,0,0,0,0,0)
    setOE("deimos" ,7,"moon"   ,0    ,vec(0)          ,0,0,0,0,0,0,0,0,0,0,0,0)
    setOE("ceres"  ,8,"planet",473   ,vec(150)        ,80.3293,10.593,72.5220, 2.7675,0.075823,95.9891,0.00,5.60439e-6,0.00,1.07388316e-8,2.21100611e-7, 0.21413095)
    
    # Holograms Initialisation
    for(I = 0, Names:count(), 1){planetHolo(I)}
    
}
# End of if(first())

# PrintArray server side
if(PrintArray:count() > 0){
    if(clk("nextString")){
        printServer(PrintArray:shiftString())
        if(PrintArray:count() > 0){
            timer("nextString",1000)
        }else{IsPrinting = 0}
    }
}
# End of PrintArray
